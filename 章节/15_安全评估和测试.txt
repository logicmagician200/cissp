

安全评估
        安全评估是指对系统的安全进行全面审查。

        识别可能造成危害的漏洞，并提出修复建议。

        安全评估的主要成果通常是向管理层提出评估报告。

安全测试
        安全测试旨在验证某想控制措施是否有效

        测试原则：
                一个好的测试用例有较高的概率能暴露错误。
                不能只测一般情况。

漏洞评估：
        发现尽可能多的漏洞
        漏洞评估主要用来发现漏洞。

        漏洞扫描的 4 类：
                网络发现扫描
                网络漏洞扫描
                web 漏洞扫描
                数据库漏洞扫描

01，安全测试类型
        安全测试
        安全评估：评估的结果通常向管理层提供评估报告
        安全审计

02，审计需求的来源
        1，业务驱动
        2，法律法规：美国联邦信息安全法案（FISMA Federal Information Security Management Act）要求联邦机构每年至少对组织的信息安全体系进行一次自我审计和独立的第三方审计；

03，审计的分类
        内部审计：组织拥有自己的审计团队，以实现持续改进组织的安全态势。
        第二方审计：甲方对乙方的审计
        第三方审计：客观性


04，SOC 报告
        SOC 报告的意义：提供 SOC 报告代表组织已经完成了第三方审计。

        SOC1 报告：与财务报告内部控制有关。

        SOC2 和 SOC3 报告：
                包含设计和运行有限性的报告。
                原则和准则具体定义安全性、可用性、机密性、处理完整性和隐私。

                SOC3 报告一般用于向大范围用户通报其保障级别而不需要披露细节控制和测试结果。

        Type1：证明控制设计有效性（某个时间点）
        Type2：证明控制执行有效性（某个时间段）

        SOC1 Type1：证明组织内部财务控制设计合理。

        SOC1 Type2：证明这些控制已经有效运作一段时间。

        SOC2 Type1：提供当下的控制设计合理性证明。

        SOC2 Type2：通过更长时间（通常 1 年）来观察确认控制的有效性。

        SOC3：是 SOC2 Type2 的摘要版。

05，导致漏洞的常见原因
        1，不恰当的编程方式
        2，安全基础设施错配
        3，安全基础设施功能错误
        4，实施流程的逻辑错误
        

06，SCAP Security Content Automation Protocol 安全内容自动化协议 -- 遗留
    1，CVE common vulnerabilities and exposures 通用漏洞披露


    2，CVSS common vulnerabilities scoring system 通用漏洞评分系统


    3，CCE common configuration enumeration 通用配置枚举


    4，CPE common platform enumeration 通用平台枚举


    5，XCCDF extensible configuration checklist description format 可扩展配置清单描述格式


    6，OVAL open vulnerability and assessment language


07，漏洞扫描
        1，网络发现扫描：探测系统，扫描端口
        2，网络漏洞扫描：发现存在的已知漏洞
        3，web 应用漏洞扫描
        4，数据库漏洞扫描

        漏洞管理工作流程：
            检测
            验证
            修复

安全评估和渗透测试的区别
        渗透测试的目的是突破，只要突破访问控制，就能证明系统存在漏洞。渗透测试不包含风险或漏洞评估的内容。

        安全评估不必要努力证明可以突破访问控制，要做的事对组织内部的各种威胁有一个清晰的描述，并且指出如何去消除这些威胁。


08，渗透测试：渗透测试不是漏洞评估，而是安全评估。
        渗透测试不只是发生漏洞，还要利用漏洞，尝试突破系统。

        渗透测试之前要签署授权测试范围的授权书。

09，渗透测试的步骤
        1，发现：收集目标系统的相关信息，例如操作系统的版本。
        2，枚举：执行端口扫描和资源识别方法。识别可以使用的账号
        3，脆弱性探测：识别系统中的脆弱部分。可分为（人为脆弱性、物理脆弱性、系统和网络脆弱性）
        4，利用：尝试利用脆弱性进行未授权的访问。
        5，向管理层提交报告：提供报告和安全建议。


10，渗透测试的分类：

    1，从攻击者对目标的了解程度分：
            黑盒
            白盒：完全了解目标情况，例如公司前员工。
            灰盒


    2，从双方知情情况分：
            盲测：组织知道正在进行渗透测试，攻击者只能使用公开的信息进行未授权的访问。
            双盲测试：对盲测的扩展，事先不通知管理员和安全人员。
            针对性测试：测试人员和目标系统的 IT 人员事前知道的情况下进行测试。
                    组织向测试人员提供目标主机和网络的设计信息。并向测试人员提供有效授权的普通账号，测试人员以此为起点进行攻击，企图提升权限到特权账号。

    3，从范围分：
            外包测试：
                    从外部网络对目标进行攻击测试。主要用来测试对外安全防御措施是否存在漏洞。

            内部测试：
                    从内部网络对目标进行攻击测试，主要为了测试攻击者突破外部网络防线后，入侵者能够访问到组织的哪些信息资源，评估对组织造成的损害。

11，战争拨号：--遗留

12，BAS breach and attack simulation 破坏和攻击模拟
        一种测试安全防护措施的技术，它可以模拟真实的攻击行为来评估网络防护系统的安全性。

13，测试技术分类
        1，是否了解内部结构
                白盒测试（结构性测试/开箱测试）：
                        白盒测试的关键属性是能够访问源代码。


                        测试覆盖率（适用于白盒，结构化测试）
                                判断（分支）覆盖率
                                条件覆盖率
                                函数覆盖率
                                循环覆盖率
                                语句覆盖率
                        
                        结构化测试主要是放在模块化级别的测试。
                        结构化测试可以用被测的软件结构的百分比来作为指标衡量。

                黑盒测试（功能性测试/避箱测试）：
                        测试用例基于软件产品的具体要做什么来定义。

                灰盒测试：
                        结合黑盒和白盒的测试方法。
                        可以使用源代码帮助设计测试用例，但是不会分析应用程序的内部工作原理。

        2，是否运行
                动态测试：
                        例如：合成交易（synthetic transaction）

                静态测试：
                        程序未运行。
                        
                        静态测试有 3 种：
                                代码测试
                                界面测试
                                文档测试
        3，是否人工
                人工测试：


                自动化测试：

14，各种用例
        测试用例 use case：
                站在正常用户使用系统的角度的测试用例。
        误用例 misuse case：
                来自对系统有恶意的人员的视角。
        正向测试用例 positive testing：
                确定应用按照所期待的方式工作，如果在正向测试中发现错误则失败。
        负向测试用例 negative testing：
                确保应用可以妥善处理无效输入或非预期的用户行为。
                站在攻击者或搞破坏的角度，确保系统的小心优雅的处理非预期的输入。使用误用例或滥用用例。
                fuzz 测试就是一个负向测试。
        正向测试和负向测试通常都是黑盒测试。

15，威胁建模
        识别威胁及其影响，

16，测试类型
        SAST
        DAST
        IAST
        RASP：运行时应用程序安全保护

17，Fuzz Testing 模糊测试
        模糊测试通常不能完全覆盖程序的代码，一般仅限于检测不涉及复杂业务逻辑的简单漏洞。
        优点：检测至关重要的应用程序的崩溃。

        两类 Fuzz 测试：
                突变(mutation 或 dumb)模糊测试：从软件实际操作获取输入值，然后操纵或改变输入 值来生成模糊输入。突变模糊测试可能改变输入的内容，在内容尾部追加字符串，或执行其 他的数据操纵方法。 

                预生成（智能）模糊测试：设计数据模型，并基域对软件所用数据类型的理解创建新的模糊输入。


冒烟测试
        确保应用的关键功能没有重大问题。

18，合成交易 和 真实交易
        合成交易 Synthetic transaction 主动监控
                主动或预响应监控的方式 proactive monitoring：
                        包括使用外部代理（agent）运行脚本交易的方式而不是 web 应用。
                监控的方式：
                        website monitoring
                        database monitoring
                        TCP port monitoring

        真实交易 real transactions 被动监控        
                真实用户监控 RUM
                        web 监控方法，旨在捕获或分析 web 或应用上每个用户的每一笔交易。

                        RUM 又称 real-user measurement真实用户测量、real-user metrics 真实用户指标、end-user experience monitoring EUM 真实用户体验监控

                        RUM 是一种被动监控

                价值： 7 * 24 小时实时监控

19，软件变更测试

        回归分析：确定变更的影响，基于相关文档的评审，也是为识别运行必要的回归测试。


        回归测试：
                测试变更没有引入新的错误
                运用之前程序执行正确的测试用例，比对现有结果和以前的结果发现软件变化后的非预期结果。

20，接口测试
        主要检查应用的不同组件之间是否彼此同步。

        用于确保应用的质量。

21，不同级别的测试
        1，单元测试 unit level testing：
                关注子程序功能的早期检，该功能不在系统级别的检查测试中显现；

        2，集成测试 integration level testing：测试模块之间的接口
                自上而下：广度优先
                自下而上：深度优先
                三明治测试

        3，系统测试 system level testing：
                表明所有规定功能存在以及软件产品是可信的

        4，验收测试 
                UAT：用户验收测试
                        通常是测试的最后一个阶段。
                        旨在验证系统是否满足以确定的用户需求和功能规格。

                QAT：质量验收测试
                        确保软件达到高质量。

22，日志的作用
        执行审计和取证调查
        日志主要用于问责

23，日志面临的挑战
        确保日志的 CIA
        确保安全、系统和网络管理员定期分析日志数据。

24，账号管理
        添加账号
                新员工要签署可接受使用策略（AUP）

        管理账号
                仅在必要时才使用特权账号，日常维护工作使用受限账号。

        暂停账号
                暂停不在使用的账号

25，Metrics 测量指标

        测量指标包含所有来自评估和监控并有自动化工具以及手工程序所产生的安全相关信息，并组织成有意义的信息来支持决策和报告要求。

        测量指标应该有维持或改进安全态势的具体目标驱动

        测量指标开发系统级别的数据使得使命/业务背景或组织风险管理变的有意义。

        KPI：关键绩效指标
                测量组织在一个给定的时间执行一个给定任务的效率。

        KRI：关键风险指标
                测量执行给定动作或动作集合所固有的风险。
                KRI 关键风险指标，关注风险变化情况。

26，ISCM Information security continuous monitoring 信息安全持续监控--遗留



27，管理评审
        管理评审是高级管理层决定管理体系是否有效的实现其目标的正式会议。

        管理评审应该周期性的开展，否则将使检查风险变主动为被动。

        评审输入：
                一个关键输入：评审的结果，可以是内部评审也可以是外部评审

                另一个输入上次评审发现问题以及整改情况的清单

                客户评价
        
        管理行动：     
                高级领导考虑所有的输入信息，通常问一些有针对性的问题，然后决定批准、拒接、或推迟的建议。

28，编辑控制（预防性控制）
        检查输入的精确性
        字符检查
        范围检查
        关系检查
        合理性检查
        交易限制


29，SwA software assurance 软件保障/软件担保--遗留




















        确保开发或采购的软件达到安全要求。





weakness
















